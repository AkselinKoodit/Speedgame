{"version":3,"sources":["components/Circle.js","components/GameOver.js","assets/sounds/guerrillaRadio.mp3","assets/sounds/mistake.wav","assets/sounds/ballBlib.wav","App.js","index.js"],"names":["Circle","props","className","color","active","onClick","click","style","pointerEvents","disabled","closeHandler","window","location","reload","GameOver","score","gameStartSound","Audio","bgsound","gameEnd","gameoversound","clickSound","clicksound","getRandomInt","min","max","Math","floor","random","console","log","App","state","current","circles","id","showGameOver","rounds","gameStart","disableStop","clicked","gameStop","timer","undefined","pace","clickHandler","play","setState","endHandler","targetCircle","nextTarget","setTimeout","startHandler","pause","clearTimeout","circlesList","this","map","circle","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f7bfa1c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Circle.css\";\r\n\r\nconst Circle = (props) => {\r\n  return (\r\n    <div\r\n      className={`circle ${props.color} ${props.active ? \" active\" : \"\"}`}\r\n      //or you could do this:\r\n      // <div className=\"circle\" style={{ backgroundColor: props.color } onClick={props.click}}>\r\n      onClick={props.click}\r\n      style={{ pointerEvents: props.disabled ? \"auto\" : \"none\" }}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default Circle;\r\n","import React from \"react\";\r\nimport \"./GameOver.css\";\r\n\r\nconst closeHandler = () => {\r\n  window.location.reload();\r\n};\r\n\r\nconst endGame = (score) => {\r\n  if (score < 5) {\r\n    return \"Pathetic!\";\r\n  } else if (score < 10) {\r\n    return \"You can do better.\";\r\n  } else if (score < 15) {\r\n    return \"Not bad at all!\";\r\n  } else if (score < 20) {\r\n    return \"Awesome!\";\r\n  } else {\r\n    return \"YOU MUST BE THE CHOSEN ONE!!\";\r\n  }\r\n};\r\n\r\nconst GameOver = (props) => {\r\n  return (\r\n    <div className=\"overlay\">\r\n      <div className=\"gameover\">\r\n        <h2>Game over</h2>\r\n        <p>Your score was: {props.score} </p>\r\n        <p>{endGame(props.score)}</p>\r\n        <button onClick={closeHandler}>Close</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameOver;\r\n","export default __webpack_public_path__ + \"static/media/guerrillaRadio.6574547c.mp3\";","export default __webpack_public_path__ + \"static/media/mistake.3e2b8a36.wav\";","export default __webpack_public_path__ + \"static/media/ballBlib.03ee3acc.wav\";","import React, { Component } from \"react\";\nimport Circle from \"./components/Circle\";\nimport GameOver from \"./components/GameOver\";\n\nimport \"./App.css\";\n\nimport bgsound from \"./assets/sounds/guerrillaRadio.mp3\";\nimport gameoversound from \"./assets/sounds/mistake.wav\";\nimport clicksound from \"./assets/sounds/ballBlib.wav\";\n\nlet gameStartSound = new Audio(bgsound); //Music from https://downloads.khinsider.com/ Rage Against the Machine - Guerrilla Radio\nlet gameEnd = new Audio(gameoversound);\nlet clickSound = new Audio(clicksound);\n\nconsole.log(\"Random number between 1-4:\" + getRandomInt(1, 4));\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nclass App extends Component {\n  state = {\n    score: 0,\n    current: 0,\n    circles: [\n      { id: 1, color: \"green\" },\n      { id: 2, color: \"brown\" },\n      { id: 3, color: \"orange\" },\n      { id: 4, color: \"blue\" },\n    ],\n    showGameOver: false,\n    rounds: 0,\n    gameStart: false,\n    disableStop: true,\n    clicked: false,\n    gameStop: true,\n  };\n\n  timer = undefined;\n  pace = 1500;\n\n  clickHandler = (id) => {\n    if (this.state.current !== id) {\n      this.endHandler();\n      return;\n    }\n    if (this.state.clicked === false) {\n      clickSound.play();\n      this.setState({\n        score: this.state.score + 1,\n        rounds: 0,\n        clicked: true,\n      });\n    }\n  };\n\n  targetCircle = () => {\n    if (this.state.rounds >= 3) {\n      this.endHandler();\n      return;\n    }\n    let nextTarget = undefined;\n\n    do {\n      nextTarget = getRandomInt(1, 4);\n    } while (nextTarget === this.state.current);\n\n    this.setState({\n      current: nextTarget,\n      rounds: this.state.rounds + 1,\n      clicked: false,\n    });\n    console.log(\"round: \" + this.state.rounds);\n    this.pace *= 0.95;\n    this.timer = setTimeout(this.targetCircle, this.pace);\n\n    console.log(\"Target is: \" + this.state.current);\n  };\n\n  startHandler = () => {\n    gameStartSound.play();\n    this.targetCircle();\n    this.setState({\n      gameStart: true,\n      gameStop: false,\n    });\n  };\n  endHandler = () => {\n    gameStartSound.pause();\n    gameEnd.play();\n    clearTimeout(this.timer);\n\n    this.setState({\n      showGameOver: true,\n    });\n  };\n\n  render() {\n    const circlesList = this.state.circles.map((circle) => {\n      return (\n        <Circle\n          id={circle.id}\n          key={circle.id}\n          color={circle.color}\n          click={() => this.clickHandler(circle.id)}\n          active={this.state.current === circle.id}\n          disabled={this.state.gameStart}\n        />\n      );\n    });\n    return (\n      <div>\n        <h1>Speedtest</h1>\n        <p>Your score: {this.state.score}</p>\n        <div className=\"circles\">{circlesList}</div>\n        <div className=\"controls\">\n          <button onClick={this.startHandler} disabled={this.state.gameStart}>\n            Start\n          </button>\n          <button onClick={this.endHandler} disabled={this.state.gameStop}>\n            Stop\n          </button>\n        </div>\n        {this.state.showGameOver && <GameOver score={this.state.score} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}